// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Games {
  id                    Int                 @id @default(autoincrement())
  name                  String              @db.VarChar(255)
  type                  Game_type
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  tournaments           Tournaments[]
  teams                 Teams[]
}
model Applications {
  id                    Int                 @id @default(autoincrement())
  playerId              Int                 @db.Integer
  teamId                Int                 @db.Integer
  status                Status              @default(PENDING)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  Team                  Teams               @relation(fields: [teamId], references: [id])
}
model Teams {
  id                    Int                 @id @default(autoincrement())
  name                  String?             @db.VarChar(255)
  shield_url            String?             @db.VarChar(255)
  isProvisional         Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  teamToPlayers         TeamToPlayers[]
  inscriptions          Inscriptions[]
  matchToTeams          MatchToTeams[]
  games                 Games[]
  teams                 Applications[]
}
model TeamToPlayers {
  teamId                Int                 @db.Integer
  playerId              Int                 @db.Integer
  rol                   Role                @default(CAPTAIN)
  nick                  String              @db.VarChar(255)
  createdAt             DateTime            @default(now())
  team                  Teams               @relation(fields: [teamId], references: [id])
  @@unique([teamId,playerId])
}
model Tournaments {
  id                    Int                 @id @default(autoincrement())
  gameId                Int                 @db.Integer
  name                  String              @db.VarChar(255)
  numberTeams           Int                 @db.Integer
  start                 DateTime            @db.Date
  end                   DateTime            @db.Date
  amount                Float               @default(0.00)
  player_count          Int                 @db.Integer
  substitute_count      Int
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  inscriptions          Inscriptions[]
  phases                Phases[]
  game                  Games               @relation(fields: [gameId], references: [id])
}
model Phases {
  id                    Int                 @id @default(autoincrement())
  tournamentId          Int                 @db.Integer
  name                  String              @db.VarChar(255)
  phase_type            Phase_type
  team_count            Int                 @db.Integer
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  matches               Matches[]
  tournament            Tournaments         @relation(fields: [tournamentId], references: [id])
}
model Matches {
  id                    Int                 @id @default(autoincrement())
  phaseId               Int
  schedule              DateTime            @db.Date
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  phase                 Phases              @relation(fields: [phaseId], references: [id])
  matchToTeams          MatchToTeams[]
  reportMatches         ReportMatches[]
}
model ReportMatches {
  id                    Int                @id @default(autoincrement())
  matchId               Int                @db.Integer
  rezon                 String             @db.VarChar(255)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  matches               Matches            @relation(fields: [matchId], references: [id])
}
model MatchToTeams {
  matchId               Int                 @db.Integer
  teamId                Int                 @db.Integer
  score                 Int
  isWinner              Boolean             @default(false)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  matche                Matches             @relation(fields: [matchId], references: [id])
  team                  Teams               @relation(fields: [teamId], references: [id])
  @@unique([matchId,teamId])
}
model Inscriptions {
  id                    Int                 @id @default(autoincrement())
  teamId                Int                 @db.Integer
  tournamentId          Int                 @db.Integer
  isPayment             Boolean             @default(false)  
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  team                  Teams               @relation(fields: [teamId], references: [id])
  tournament            Tournaments         @relation(fields: [tournamentId], references: [id])
}
// ENUMUS SECTIONS

enum Phase_type {
  ROUND_ROBIN
  kNOcKOUT
}
enum Game_type {
  MOVA
  STRATEGIC
}
enum Status {
  PENDING
  ACCEPTED
  REJECTED
}
enum Role {
  CAPTAIN
  PLAYER
  SUBSTITUTE
}